{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.firstMove = false;\n        this.previousBoard = JSON.parse(JSON.stringify(this.board));\n        this.initControls();\n        this.getState();\n    }\n    hasBoardChanged() {\n        return JSON.stringify(this.board) !== JSON.stringify(this.previousBoard);\n    }\n    initControls() {\n        document.addEventListener(\"keydown\", (e)=>{\n            if (e.key === \"ArrowLeft\") this.moveLeft();\n            else if (e.key === \"ArrowRight\") this.moveRight();\n            else if (e.key === \"ArrowUp\") this.moveUp();\n            else if (e.key === \"ArrowDown\") this.moveDown();\n        });\n    }\n    moveLeft() {\n        for(let row = 0; row < 4; row++){\n            let newRow = this.board[row].filter((num)=>num !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                newRow[i + 1] = 0;\n            }\n            newRow = newRow.filter((num)=>num !== 0);\n            while(newRow.length < 4)newRow.push(0);\n            this.board[row] = newRow;\n        }\n        if (this.hasBoardChanged()) {\n            this.previousBoard = JSON.parse(JSON.stringify(this.board));\n            this.addNewTile();\n            this.getState();\n            this.checkFirstMove();\n            this.getScore();\n            const gameStatus = this.getStatus();\n            const messageWin = document.querySelector(\".message-win\");\n            const messageLose = document.querySelector(\".message-lose\");\n            if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n            else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n        }\n    }\n    moveRight() {\n        for(let row = 0; row < 4; row++){\n            let newRow = this.board[row].filter((num)=>num !== 0);\n            for(let i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                newRow[i] *= 2;\n                newRow[i - 1] = 0;\n            }\n            newRow = newRow.filter((num)=>num !== 0);\n            while(newRow.length < 4)newRow.unshift(0);\n            this.board[row] = newRow;\n        }\n        if (this.hasBoardChanged()) {\n            this.previousBoard = JSON.parse(JSON.stringify(this.board));\n            this.addNewTile();\n            this.getState();\n            this.checkFirstMove();\n            this.getScore();\n            const gameStatus = this.getStatus();\n            const messageWin = document.querySelector(\".message-win\");\n            const messageLose = document.querySelector(\".message-lose\");\n            if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n            else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n        }\n    }\n    moveUp() {\n        for(let col = 0; col < 4; col++){\n            let newCol = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                newCol[i] *= 2;\n                newCol[i + 1] = 0;\n            }\n            newCol = newCol.filter((num)=>num !== 0);\n            while(newCol.length < 4)newCol.push(0);\n            for(let row = 0; row < 4; row++)this.board[row][col] = newCol[row];\n        }\n        if (this.hasBoardChanged()) {\n            this.previousBoard = JSON.parse(JSON.stringify(this.board));\n            this.addNewTile();\n            this.getState();\n            this.checkFirstMove();\n            this.getScore();\n            const gameStatus = this.getStatus();\n            const messageWin = document.querySelector(\".message-win\");\n            const messageLose = document.querySelector(\".message-lose\");\n            if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n            else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n        }\n    }\n    moveDown() {\n        for(let col = 0; col < 4; col++){\n            let newCol = [];\n            for(let row = 0; row < 4; row++)if (this.board[row][col] !== 0) newCol.push(this.board[row][col]);\n            for(let i = newCol.length - 1; i > 0; i--)if (newCol[i] === newCol[i - 1]) {\n                newCol[i] *= 2;\n                newCol[i - 1] = 0;\n            }\n            newCol = newCol.filter((num)=>num !== 0);\n            while(newCol.length < 4)newCol.unshift(0);\n            for(let row = 0; row < 4; row++)this.board[row][col] = newCol[row];\n        }\n        if (this.hasBoardChanged()) {\n            this.previousBoard = JSON.parse(JSON.stringify(this.board));\n            this.addNewTile();\n            this.getState();\n            this.checkFirstMove();\n            this.getScore();\n            const gameStatus = this.getStatus();\n            const messageWin = document.querySelector(\".message-win\");\n            const messageLose = document.querySelector(\".message-lose\");\n            if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n            else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        let score = 0;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++)score += this.board[row][col];\n        const gameScore = document.querySelector(\".game-score\");\n        gameScore.textContent = score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        let index = 0;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const cell = cells[index];\n            cell.innerHTML = \"\";\n            cell.className = \"field-cell\";\n            const value = this.board[row][col];\n            if (value !== 0) {\n                cell.classList.add(`field-cell--${value}`);\n                const tile = document.createElement(\"div\");\n                tile.classList.add(\"tile\");\n                tile.innerText = value;\n                cell.appendChild(tile);\n            }\n            index++;\n        }\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        const win = this.board.some((row)=>row.includes(2048));\n        const lose = !this.board.some((row)=>row.includes(0)) && !this.canMerge();\n        if (win) return \"win\";\n        else if (lose) return \"lose\";\n        else return \"playing\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        const messageStart = document.querySelector(\".message-start\");\n        const startButton = document.querySelector(\".start\");\n        startButton.addEventListener(\"click\", ()=>{\n            messageStart.classList.add(\"hidden\");\n            this.restart();\n        });\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.addNewTile();\n        this.addNewTile();\n        this.getState();\n        const messageWin = document.querySelector(\".message-win\");\n        const messageLose = document.querySelector(\".message-lose\");\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n        const gameScore = document.querySelector(\".game-score\");\n        gameScore.textContent = \"0\";\n    }\n    // Add your own methods here\n    addNewTile() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            const value = Math.random() < 0.9 ? 2 : 4;\n            this.board[randomCell.row][randomCell.col] = value;\n            if (this.hasBoardChanged()) {\n                this.previousBoard = JSON.parse(JSON.stringify(this.board));\n                this.getState();\n            }\n        }\n    }\n    canMerge() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = this.board[row][col];\n            if (col < 3 && current === this.board[row][col + 1]) return true;\n            if (row < 3 && current === this.board[row + 1][col]) return true;\n        }\n        return false;\n    }\n    checkFirstMove() {\n        if (!this.firstMove) {\n            this.firstMove = true;\n            this.changeButton();\n        }\n    }\n    changeButton() {\n        const startButton = document.querySelector(\".start\");\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n        startButton.textContent = \"Restart\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\n$09e991522ca7e64e$var$game.start();\n\n\n//# sourceMappingURL=index.906d6b4d.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\ngame.start();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.firstMove = false;\n    this.previousBoard = JSON.parse(JSON.stringify(this.board));\n    this.initControls();\n    this.getState();\n  }\n\n  hasBoardChanged() {\n    return JSON.stringify(this.board) !== JSON.stringify(this.previousBoard);\n  }\n\n  initControls() {\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'ArrowLeft') {\n        this.moveLeft();\n      } else if (e.key === 'ArrowRight') {\n        this.moveRight();\n      } else if (e.key === 'ArrowUp') {\n        this.moveUp();\n      } else if (e.key === 'ArrowDown') {\n        this.moveDown();\n      }\n    });\n  }\n\n  moveLeft() {\n    for (let row = 0; row < 4; row++) {\n      let newRow = this.board[row].filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n      this.board[row] = newRow;\n    }\n\n    if (this.hasBoardChanged()) {\n      this.previousBoard = JSON.parse(JSON.stringify(this.board));\n      this.addNewTile();\n      this.getState();\n      this.checkFirstMove();\n      this.getScore();\n\n      const gameStatus = this.getStatus();\n      const messageWin = document.querySelector('.message-win');\n      const messageLose = document.querySelector('.message-lose');\n\n      if (gameStatus === 'win') {\n        messageWin.classList.remove('hidden');\n      } else if (gameStatus === 'lose') {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n  moveRight() {\n    for (let row = 0; row < 4; row++) {\n      let newRow = this.board[row].filter((num) => num !== 0);\n\n      for (let i = newRow.length - 1; i > 0; i--) {\n        if (newRow[i] === newRow[i - 1]) {\n          newRow[i] *= 2;\n          newRow[i - 1] = 0;\n        }\n      }\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n      this.board[row] = newRow;\n    }\n\n    if (this.hasBoardChanged()) {\n      this.previousBoard = JSON.parse(JSON.stringify(this.board));\n      this.addNewTile();\n      this.getState();\n      this.checkFirstMove();\n      this.getScore();\n\n      const gameStatus = this.getStatus();\n      const messageWin = document.querySelector('.message-win');\n      const messageLose = document.querySelector('.message-lose');\n\n      if (gameStatus === 'win') {\n        messageWin.classList.remove('hidden');\n      } else if (gameStatus === 'lose') {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n  moveUp() {\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          newCol[i + 1] = 0;\n        }\n      }\n      newCol = newCol.filter((num) => num !== 0);\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    if (this.hasBoardChanged()) {\n      this.previousBoard = JSON.parse(JSON.stringify(this.board));\n      this.addNewTile();\n      this.getState();\n      this.checkFirstMove();\n      this.getScore();\n\n      const gameStatus = this.getStatus();\n      const messageWin = document.querySelector('.message-win');\n      const messageLose = document.querySelector('.message-lose');\n\n      if (gameStatus === 'win') {\n        messageWin.classList.remove('hidden');\n      } else if (gameStatus === 'lose') {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n  moveDown() {\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = newCol.length - 1; i > 0; i--) {\n        if (newCol[i] === newCol[i - 1]) {\n          newCol[i] *= 2;\n          newCol[i - 1] = 0;\n        }\n      }\n      newCol = newCol.filter((num) => num !== 0);\n\n      while (newCol.length < 4) {\n        newCol.unshift(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    if (this.hasBoardChanged()) {\n      this.previousBoard = JSON.parse(JSON.stringify(this.board));\n      this.addNewTile();\n      this.getState();\n      this.checkFirstMove();\n      this.getScore();\n\n      const gameStatus = this.getStatus();\n      const messageWin = document.querySelector('.message-win');\n      const messageLose = document.querySelector('.message-lose');\n\n      if (gameStatus === 'win') {\n        messageWin.classList.remove('hidden');\n      } else if (gameStatus === 'lose') {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    let score = 0;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        score += this.board[row][col];\n      }\n    }\n\n    const gameScore = document.querySelector('.game-score');\n\n    gameScore.textContent = score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    const cells = document.querySelectorAll('.field-cell');\n    let index = 0;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const cell = cells[index];\n\n        cell.innerHTML = '';\n        cell.className = 'field-cell';\n\n        const value = this.board[row][col];\n\n        if (value !== 0) {\n          cell.classList.add(`field-cell--${value}`);\n\n          const tile = document.createElement('div');\n\n          tile.classList.add('tile');\n          tile.innerText = value;\n          cell.appendChild(tile);\n        }\n        index++;\n      }\n    }\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const win = this.board.some((row) => row.includes(2048));\n    const lose = !this.board.some((row) => row.includes(0)) && !this.canMerge();\n\n    if (win) {\n      return 'win';\n    } else if (lose) {\n      return 'lose';\n    } else {\n      return 'playing';\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    const messageStart = document.querySelector('.message-start');\n    const startButton = document.querySelector('.start');\n\n    startButton.addEventListener('click', () => {\n      messageStart.classList.add('hidden');\n      this.restart();\n    });\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.addNewTile();\n    this.addNewTile();\n    this.getState();\n\n    const messageWin = document.querySelector('.message-win');\n    const messageLose = document.querySelector('.message-lose');\n\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n\n    const gameScore = document.querySelector('.game-score');\n\n    gameScore.textContent = '0';\n  }\n\n  // Add your own methods here\n\n  addNewTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      const value = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[randomCell.row][randomCell.col] = value;\n\n      if (this.hasBoardChanged()) {\n        this.previousBoard = JSON.parse(JSON.stringify(this.board));\n        this.getState();\n      }\n    }\n  }\n\n  canMerge() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.board[row][col];\n\n        if (col < 3 && current === this.board[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && current === this.board[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkFirstMove() {\n    if (!this.firstMove) {\n      this.firstMove = true;\n      this.changeButton();\n    }\n  }\n\n  changeButton() {\n    const startButton = document.querySelector('.start');\n\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["constructor","initialState","board","firstMove","previousBoard","JSON","parse","stringify","initControls","getState","hasBoardChanged","document","addEventListener","e","key","moveLeft","moveRight","moveUp","moveDown","row","newRow","filter","num","i","length","push","addNewTile","checkFirstMove","getScore","gameStatus","getStatus","messageWin","querySelector","messageLose","classList","remove","unshift","col","newCol","score","gameScore","textContent","cells","querySelectorAll","index","cell","innerHTML","className","value","add","tile","createElement","innerText","appendChild","win","some","includes","lose","canMerge","start","messageStart","startButton","restart","emptyCells","randomCell","Math","floor","random","current","changeButton"],"version":3,"file":"index.906d6b4d.js.map"}