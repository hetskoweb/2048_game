{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState;\n        this.firstMove = false;\n        this.previousBoard = JSON.parse(JSON.stringify(this.board));\n        this.initControls();\n        this.getState();\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"hasBoardChanged\",\n            value: function hasBoardChanged() {\n                return JSON.stringify(this.board) !== JSON.stringify(this.previousBoard);\n            }\n        },\n        {\n            key: \"initControls\",\n            value: function initControls() {\n                var _this = this;\n                document.addEventListener(\"keydown\", function(e) {\n                    if (e.key === \"ArrowLeft\") _this.moveLeft();\n                    else if (e.key === \"ArrowRight\") _this.moveRight();\n                    else if (e.key === \"ArrowUp\") _this.moveUp();\n                    else if (e.key === \"ArrowDown\") _this.moveDown();\n                });\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        newRow[i + 1] = 0;\n                    }\n                    newRow = newRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(newRow.length < 4)newRow.push(0);\n                    _this.board[row] = newRow;\n                };\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (this.hasBoardChanged()) {\n                    this.previousBoard = JSON.parse(JSON.stringify(this.board));\n                    this.addNewTile();\n                    this.getState();\n                    this.checkFirstMove();\n                    this.getScore();\n                    var gameStatus = this.getStatus();\n                    var messageWin = document.querySelector(\".message-win\");\n                    var messageLose = document.querySelector(\".message-lose\");\n                    if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n                    else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                        newRow[i] *= 2;\n                        newRow[i - 1] = 0;\n                    }\n                    newRow = newRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(newRow.length < 4)newRow.unshift(0);\n                    _this.board[row] = newRow;\n                };\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (this.hasBoardChanged()) {\n                    this.previousBoard = JSON.parse(JSON.stringify(this.board));\n                    this.addNewTile();\n                    this.getState();\n                    this.checkFirstMove();\n                    this.getScore();\n                    var gameStatus = this.getStatus();\n                    var messageWin = document.querySelector(\".message-win\");\n                    var messageLose = document.querySelector(\".message-lose\");\n                    if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n                    else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (_this.board[row][col] !== 0) newCol.push(_this.board[row][col]);\n                    for(var i = 0; i < newCol.length - 1; i++)if (newCol[i] === newCol[i + 1]) {\n                        newCol[i] *= 2;\n                        newCol[i + 1] = 0;\n                    }\n                    newCol = newCol.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(newCol.length < 4)newCol.push(0);\n                    for(var row1 = 0; row1 < 4; row1++)_this.board[row1][col] = newCol[row1];\n                };\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (this.hasBoardChanged()) {\n                    this.previousBoard = JSON.parse(JSON.stringify(this.board));\n                    this.addNewTile();\n                    this.getState();\n                    this.checkFirstMove();\n                    this.getScore();\n                    var gameStatus = this.getStatus();\n                    var messageWin = document.querySelector(\".message-win\");\n                    var messageLose = document.querySelector(\".message-lose\");\n                    if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n                    else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    var newCol = [];\n                    for(var row = 0; row < 4; row++)if (_this.board[row][col] !== 0) newCol.push(_this.board[row][col]);\n                    for(var i = newCol.length - 1; i > 0; i--)if (newCol[i] === newCol[i - 1]) {\n                        newCol[i] *= 2;\n                        newCol[i - 1] = 0;\n                    }\n                    newCol = newCol.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(newCol.length < 4)newCol.unshift(0);\n                    for(var row1 = 0; row1 < 4; row1++)_this.board[row1][col] = newCol[row1];\n                };\n                for(var col = 0; col < 4; col++)_loop(col);\n                if (this.hasBoardChanged()) {\n                    this.previousBoard = JSON.parse(JSON.stringify(this.board));\n                    this.addNewTile();\n                    this.getState();\n                    this.checkFirstMove();\n                    this.getScore();\n                    var gameStatus = this.getStatus();\n                    var messageWin = document.querySelector(\".message-win\");\n                    var messageLose = document.querySelector(\".message-lose\");\n                    if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n                    else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                var score = 0;\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++)score += this.board[row][col];\n                var gameScore = document.querySelector(\".game-score\");\n                gameScore.textContent = score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                var cells = document.querySelectorAll(\".field-cell\");\n                var index = 0;\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    var cell = cells[index];\n                    cell.innerHTML = \"\";\n                    cell.className = \"field-cell\";\n                    var value = this.board[row][col];\n                    if (value !== 0) {\n                        cell.classList.add(\"field-cell--\".concat(value));\n                        var tile = document.createElement(\"div\");\n                        tile.classList.add(\"tile\");\n                        tile.innerText = value;\n                        cell.appendChild(tile);\n                    }\n                    index++;\n                }\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                var win = this.board.some(function(row) {\n                    return row.includes(2048);\n                });\n                var lose = !this.board.some(function(row) {\n                    return row.includes(0);\n                }) && !this.canMerge();\n                if (win) return \"win\";\n                else if (lose) return \"lose\";\n                else return \"playing\";\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                var _this = this;\n                var messageStart = document.querySelector(\".message-start\");\n                var startButton = document.querySelector(\".start\");\n                startButton.addEventListener(\"click\", function() {\n                    messageStart.classList.add(\"hidden\");\n                    _this.restart();\n                });\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.addNewTile();\n                this.addNewTile();\n                this.getState();\n                var messageWin = document.querySelector(\".message-win\");\n                var messageLose = document.querySelector(\".message-lose\");\n                messageWin.classList.add(\"hidden\");\n                messageLose.classList.add(\"hidden\");\n                var gameScore = document.querySelector(\".game-score\");\n                gameScore.textContent = \"0\";\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"addNewTile\",\n            value: function addNewTile() {\n                var emptyCells = [];\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n                    var value = Math.random() < 0.9 ? 2 : 4;\n                    this.board[randomCell.row][randomCell.col] = value;\n                    if (this.hasBoardChanged()) {\n                        this.previousBoard = JSON.parse(JSON.stringify(this.board));\n                        this.getState();\n                    }\n                }\n            }\n        },\n        {\n            key: \"canMerge\",\n            value: function canMerge() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    var current = this.board[row][col];\n                    if (col < 3 && current === this.board[row][col + 1]) return true;\n                    if (row < 3 && current === this.board[row + 1][col]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"checkFirstMove\",\n            value: function checkFirstMove() {\n                if (!this.firstMove) {\n                    this.firstMove = true;\n                    this.changeButton();\n                }\n            }\n        },\n        {\n            key: \"changeButton\",\n            value: function changeButton() {\n                var startButton = document.querySelector(\".start\");\n                startButton.classList.remove(\"start\");\n                startButton.classList.add(\"restart\");\n                startButton.textContent = \"Restart\";\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\n$197cd56b15c33885$var$game.start();\n\n})();\n//# sourceMappingURL=index.31aa3abd.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\ngame.start();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.firstMove = false;\n    this.previousBoard = JSON.parse(JSON.stringify(this.board));\n    this.initControls();\n    this.getState();\n  }\n\n  hasBoardChanged() {\n    return JSON.stringify(this.board) !== JSON.stringify(this.previousBoard);\n  }\n\n  initControls() {\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'ArrowLeft') {\n        this.moveLeft();\n      } else if (e.key === 'ArrowRight') {\n        this.moveRight();\n      } else if (e.key === 'ArrowUp') {\n        this.moveUp();\n      } else if (e.key === 'ArrowDown') {\n        this.moveDown();\n      }\n    });\n  }\n\n  moveLeft() {\n    for (let row = 0; row < 4; row++) {\n      let newRow = this.board[row].filter((num) => num !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          newRow[i + 1] = 0;\n        }\n      }\n\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n      this.board[row] = newRow;\n    }\n\n    if (this.hasBoardChanged()) {\n      this.previousBoard = JSON.parse(JSON.stringify(this.board));\n      this.addNewTile();\n      this.getState();\n      this.checkFirstMove();\n      this.getScore();\n\n      const gameStatus = this.getStatus();\n      const messageWin = document.querySelector('.message-win');\n      const messageLose = document.querySelector('.message-lose');\n\n      if (gameStatus === 'win') {\n        messageWin.classList.remove('hidden');\n      } else if (gameStatus === 'lose') {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n  moveRight() {\n    for (let row = 0; row < 4; row++) {\n      let newRow = this.board[row].filter((num) => num !== 0);\n\n      for (let i = newRow.length - 1; i > 0; i--) {\n        if (newRow[i] === newRow[i - 1]) {\n          newRow[i] *= 2;\n          newRow[i - 1] = 0;\n        }\n      }\n      newRow = newRow.filter((num) => num !== 0);\n\n      while (newRow.length < 4) {\n        newRow.unshift(0);\n      }\n      this.board[row] = newRow;\n    }\n\n    if (this.hasBoardChanged()) {\n      this.previousBoard = JSON.parse(JSON.stringify(this.board));\n      this.addNewTile();\n      this.getState();\n      this.checkFirstMove();\n      this.getScore();\n\n      const gameStatus = this.getStatus();\n      const messageWin = document.querySelector('.message-win');\n      const messageLose = document.querySelector('.message-lose');\n\n      if (gameStatus === 'win') {\n        messageWin.classList.remove('hidden');\n      } else if (gameStatus === 'lose') {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n  moveUp() {\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = 0; i < newCol.length - 1; i++) {\n        if (newCol[i] === newCol[i + 1]) {\n          newCol[i] *= 2;\n          newCol[i + 1] = 0;\n        }\n      }\n      newCol = newCol.filter((num) => num !== 0);\n\n      while (newCol.length < 4) {\n        newCol.push(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    if (this.hasBoardChanged()) {\n      this.previousBoard = JSON.parse(JSON.stringify(this.board));\n      this.addNewTile();\n      this.getState();\n      this.checkFirstMove();\n      this.getScore();\n\n      const gameStatus = this.getStatus();\n      const messageWin = document.querySelector('.message-win');\n      const messageLose = document.querySelector('.message-lose');\n\n      if (gameStatus === 'win') {\n        messageWin.classList.remove('hidden');\n      } else if (gameStatus === 'lose') {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n  moveDown() {\n    for (let col = 0; col < 4; col++) {\n      let newCol = [];\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== 0) {\n          newCol.push(this.board[row][col]);\n        }\n      }\n\n      for (let i = newCol.length - 1; i > 0; i--) {\n        if (newCol[i] === newCol[i - 1]) {\n          newCol[i] *= 2;\n          newCol[i - 1] = 0;\n        }\n      }\n      newCol = newCol.filter((num) => num !== 0);\n\n      while (newCol.length < 4) {\n        newCol.unshift(0);\n      }\n\n      for (let row = 0; row < 4; row++) {\n        this.board[row][col] = newCol[row];\n      }\n    }\n\n    if (this.hasBoardChanged()) {\n      this.previousBoard = JSON.parse(JSON.stringify(this.board));\n      this.addNewTile();\n      this.getState();\n      this.checkFirstMove();\n      this.getScore();\n\n      const gameStatus = this.getStatus();\n      const messageWin = document.querySelector('.message-win');\n      const messageLose = document.querySelector('.message-lose');\n\n      if (gameStatus === 'win') {\n        messageWin.classList.remove('hidden');\n      } else if (gameStatus === 'lose') {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    let score = 0;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        score += this.board[row][col];\n      }\n    }\n\n    const gameScore = document.querySelector('.game-score');\n\n    gameScore.textContent = score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    const cells = document.querySelectorAll('.field-cell');\n    let index = 0;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const cell = cells[index];\n\n        cell.innerHTML = '';\n        cell.className = 'field-cell';\n\n        const value = this.board[row][col];\n\n        if (value !== 0) {\n          cell.classList.add(`field-cell--${value}`);\n\n          const tile = document.createElement('div');\n\n          tile.classList.add('tile');\n          tile.innerText = value;\n          cell.appendChild(tile);\n        }\n        index++;\n      }\n    }\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const win = this.board.some((row) => row.includes(2048));\n    const lose = !this.board.some((row) => row.includes(0)) && !this.canMerge();\n\n    if (win) {\n      return 'win';\n    } else if (lose) {\n      return 'lose';\n    } else {\n      return 'playing';\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    const messageStart = document.querySelector('.message-start');\n    const startButton = document.querySelector('.start');\n\n    startButton.addEventListener('click', () => {\n      messageStart.classList.add('hidden');\n      this.restart();\n    });\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.addNewTile();\n    this.addNewTile();\n    this.getState();\n\n    const messageWin = document.querySelector('.message-win');\n    const messageLose = document.querySelector('.message-lose');\n\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n\n    const gameScore = document.querySelector('.game-score');\n\n    gameScore.textContent = '0';\n  }\n\n  // Add your own methods here\n\n  addNewTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      const value = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[randomCell.row][randomCell.col] = value;\n\n      if (this.hasBoardChanged()) {\n        this.previousBoard = JSON.parse(JSON.stringify(this.board));\n        this.getState();\n      }\n    }\n  }\n\n  canMerge() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.board[row][col];\n\n        if (col < 3 && current === this.board[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && current === this.board[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkFirstMove() {\n    if (!this.firstMove) {\n      this.firstMove = true;\n      this.changeButton();\n    }\n  }\n\n  changeButton() {\n    const startButton = document.querySelector('.start');\n\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","board","firstMove","previousBoard","JSON","parse","stringify","initControls","getState","key","value","_this","document","addEventListener","e","moveLeft","moveRight","moveUp","moveDown","row","_loop","newRow","filter","num","i","push","hasBoardChanged","addNewTile","checkFirstMove","getScore","gameStatus","getStatus","messageWin","querySelector","messageLose","classList","remove","unshift","col","newCol","row1","score","gameScore","textContent","cells","querySelectorAll","index","cell","innerHTML","className","add","concat","tile","createElement","innerText","appendChild","win","some","includes","lose","canMerge","messageStart","startButton","restart","emptyCells","randomCell","Math","floor","random","current","changeButton","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","start"],"version":3,"file":"index.31aa3abd.js.map"}